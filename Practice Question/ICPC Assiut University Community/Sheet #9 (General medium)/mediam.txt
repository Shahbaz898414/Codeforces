                                                A. Drawing Task
                                             time limit per test1 second
                                            memory limit per test256 megabytes
                                                   inputstandard input
                                                  outputstandard output

A young little boy is feeling boredom and didn't know what to do. by chance, he read on the internet that: drawing helps get rid of boredom. unfortunately, he didn't know how to draw but he is very creative.so he asks you to help him.

He got an empty grid of size n×m, its rows are numbered from 1 through n and its columns are numbered from 1 through m, and it is initially filled with dots "."

He will give you some instructions and you have to apply them one by one in the order they were given to you or He still feel bored and then kill himself, each instruction contains 4 integers r1,c1,r2,c2 and a lowercase Latin letter c, meaning that have to fill the sub-grid between rows r1 and r2 and columns c1 and c2, with the letter c.

Can you help the little boy ...?

Input
The first line of input contains 3 integers n,m,q(1≤n,m≤100,0≤q≤100), as described in the problem statement.

Followed by q lines each contains 4 integers r1,c1,r2,c2(1≤r1,r2≤n,1≤c1,c2≤m), and a lowercase Latin letter c.

Output
Print the grid after applying all the instructions.

Example
inputCopy
6 6 3
1 1 2 6 a
5 1 6 6 c
2 3 5 4 b
outputCopy
aaaaaa
aabbaa
..bb..
..bb..
ccbbcc
cccccc
Note
Don't print any extra spaces.



#include<bits/stdc++.h>
#define ll long long int
using namespace std;

int main(){
  ll n,m,q;cin>>n>>m>>q;

  char a[n+1][m+1];

  for (int i = 1; i <=n; i++)
  {
    for (int j = 1; j <=m; j++)
    {
      a[i][j]='.';
      
      
    }
    
  }

  // cout<<endl;
  

  ll r1,r2,c1,c2;
  char f;

  while(q--){
    cin>>r1>>c1>>r2>>c2;
    cin>>f;
    if(r1>r2) swap(r1, r2) ;
if(c1>c2) swap(c1, c2) ;
    for (int i = r1; i <=r2; i++)
    {
      
      for (int j = c1; j <=c2; j++)
      {
       
        if(a[i][j]=='.'){
          a[i][j]=f;
        }else{
          
          a[i][j]=f;
        }

        // a[i][j]=f;

        
      }
      
    }


  }

   for (int i = 1; i <=n; i++)
  {
    for (int j = 1; j <=m; j++)
    {
      
      cout<<a[i][j];
    }
    cout<<endl;
    
  }

 return 0;

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                      B. Arpa’s hard exam and Mehrdad’s naive cheat
                                              time limit per test1 second
                                             memory limit per test256 megabytes
                                                   inputstandard input
                                                  outputstandard output

There exists an island called Arpa’s land, some beautiful girls live there, as ugly ones do.

Mehrdad wants to become minister of Arpa’s land. Arpa has prepared an exam. Exam has only one question, given n, print the last digit of 1378n.


Mehrdad has become quite confused and wants you to help him. Please help, although it's a naive cheat.

Input
The single line of input contains one integer n (0  ≤  n  ≤  109).

Output
Print single integer — the last digit of 1378n.

Examples
inputCopy
1
outputCopy
8
inputCopy
2
outputCopy
4
Note
In the first example, last digit of 13781 = 1378 is 8.

In the second example, last digit of 13782 = 1378·1378 = 1898884 is 4.


#include<bits/stdc++.h>
typedef long long int ll;
using namespace std;
int main()
{
        
        ll n;
        cin>>n;

        if(n==0)
        {
            cout<<"1";
            return 0;
        }

        if(n%4==0)
            cout<<"6"<<endl;
        else if(n%4==1)
            cout<<"8"<<endl;
        else if(n%4==2)
            cout<<"4"<<endl;
        else if(n%4==3)
            cout<<"2"<<endl;

        return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



                                                   C. Dragons
                                           time limit per test2 seconds
                                         memory limit per test256 megabytes
                                                 inputstandard input
                                                 outputstandard output

Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all n dragons that live on this level. Kirito and the dragons have strength, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals s.

If Kirito starts duelling with the i-th (1 ≤ i ≤ n) dragon and Kirito's strength is not greater than the dragon's strength xi, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by yi.

Kirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.

Input
The first line contains two space-separated integers s and n (1 ≤ s ≤ 104, 1 ≤ n ≤ 103). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 ≤ xi ≤ 104, 0 ≤ yi ≤ 104) — the i-th dragon's strength and the bonus for defeating it.

Output
On a single line print "YES" (without the quotes), if Kirito can move on to the next level and print "NO" (without the quotes), if he can't.

Examples
inputCopy
2 2
1 99
100 0
outputCopy
YES
inputCopy
10 1
100 100
outputCopy
NO
Note
In the first sample Kirito's strength initially equals 2. As the first dragon's strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to 2 + 99 = 101. Now he can defeat the second dragon and move on to the next level.

In the second sample Kirito's strength is too small to defeat the only dragon and win.


#include<bits/stdc++.h>
#define mem(array,num) memset(array,num,sizeof(array))
using namespace std;
int main()
{
    long int x,c,i,j,s,n,array,num;
    pair<int, int>a[1000];
    while(cin>>s>>n)
    {
        c=1;
        for(i=0;i<n;i++)
        {
            cin>>a[i].first>>a[i].second;

        }
        sort(a,a+n);
         for(i=0;i<n;i++)
         {
             if(s<=a[i].first)
             {
                 c=0;
                 break;
             }
             else
             {
                 s=s+a[i].second;
             }
         }
         if(c==0)
            cout<<"NO\n";
         else
            cout<<"YES\n";
    }
    return 0;
}











////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                                                                D. Juicer
                                                                        time limit per test1 second
                                                                     memory limit per test256 megabytes
                                                                             inputstandard input
                                                                             outputstandard output

Kolya is going to make fresh orange juice. He has n oranges of sizes a1, a2, ..., an. Kolya will put them in the juicer in the fixed order, starting with orange of size a1, then orange of size a2 and so on. To be put in the juicer the orange must have size not exceeding b, so if Kolya sees an orange that is strictly greater he throws it away and continues with the next one.

The juicer has a special section to collect waste. It overflows if Kolya squeezes oranges of the total size strictly greater than d. When it happens Kolya empties the waste section (even if there are no more oranges) and continues to squeeze the juice. How many times will he have to empty the waste section?

Input
The first line of the input contains three integers n, b and d (1 ≤ n ≤ 100 000, 1 ≤ b ≤ d ≤ 1 000 000) — the number of oranges, the maximum size of the orange that fits in the juicer and the value d, which determines the condition when the waste section should be emptied.

The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1 000 000) — sizes of the oranges listed in the order Kolya is going to try to put them in the juicer.

Output
Print one integer — the number of times Kolya will have to empty the waste section.

Examples
input
2 7 10
5 6
output
1
input
1 5 10
7
output
0
input
3 10 10
5 7 7
output
1
input
1 1 1
1
outputCopy
0
Note
In the first sample, Kolya will squeeze the juice from two oranges and empty the waste section afterwards.

In the second sample, the orange won't fit in the juicer so Kolya will have no juice at all.

#include<bits/stdc++.h>
#define ll long long int
using namespace std;
 
int main() {
        
    ll s,n,d;
    cin>>s>>n>>d;
    ll f=d,c=0,e=0,r=0;
 
    while(s-->0){
        ll m;cin>>m;

        if(m<=n){
          c+=m;
        }
        if(c>d){
          e++;
          c=0;
        }
    }

    
      cout<<e<<endl;
    
 
    return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                                  E. Keyboard
                                                  time limit per test2 seconds
                                                  memory limit per test256 megabytes
                                                  inputstandard input
                                                  outputstandard output
Our good friend Mole is trying to code a big message. He is typing on an unusual keyboard with characters arranged in following way:


qwertyuiop
asdfghjkl;
zxcvbnm,./
Unfortunately Mole is blind, so sometimes it is problem for him to put his hands accurately. He accidentally moved both his hands with one position to the left or to the right. That means that now he presses not a button he wants, but one neighboring button (left or right, as specified in input).

We have a sequence of characters he has typed and we want to find the original message.

Input
First line of the input contains one letter describing direction of shifting ('L' or 'R' respectively for left or right).

Second line contains a sequence of characters written by Mole. The size of this sequence will be no more than 100. Sequence contains only symbols that appear on Mole's keyboard. It doesn't contain spaces as there is no space on Mole's keyboard.

It is guaranteed that even though Mole hands are moved, he is still pressing buttons on keyboard and not hitting outside it.

Output
Print a line that contains the original message.

Examples
input
R
s;;upimrrfod;pbr
output
allyouneedislove

 


#include <iostream>
#include<string>
using namespace std;

string  solve(string s1 ,char c ){
	string s="qwertyuiopasdfghjkl;zxcvbnm,./";
	string answer;
int len=s1.length();
for(int i=0;i<len;i++){
	int index=s.find(s1[i]);
	if(c=='R'){
		answer+=s[index-1];
	
	}
	else{
			answer+=s[index+1];
	}
	
}
return answer;
	
}

int main() {

string s2;
char c;
cin>>c;
cin>>s2;
 cout<<solve(s2,c);


	return 0;
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                  F. Puzzles
                                  time limit per test1 second
                                  memory limit per test256 megabytes
                                  inputstandard input
                                  outputstandard output

The end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).

The shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.

Ms. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A - B is minimum possible. Help the teacher and find the least possible value of A - B.

Input
The first line contains space-separated integers n and m (2 ≤ n ≤ m ≤ 50). The second line contains m space-separated integers f1, f2, ..., fm (4 ≤ fi ≤ 1000) — the quantities of pieces in the puzzles sold in the shop.

Output
Print a single integer — the least possible difference the teacher can obtain.

Examples
input
4 6
10 12 10 7 5 22
output
5
Note
Sample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.


#include<bits/stdc++.h>
#define ll long long int
using namespace std;
 
int main() {

    ll n,m;cin>>n>>m;

    ll a[m],min=INT_MAX,max=INT_MIN;
    for (int i = 0; i <m; i++) {
      cin>>a[i];
    }
    sort(a,a+m);

    int least=a[n-1]-a[0];
   


    for (int i = 1; i <=m-n; i++) {
      
      if(a[i+n-1]-a[i]<least) {
        least=a[i+n-1]-a[i];
        
      } 
    }

    cout<<least<<endl;
    
    return 0;
}







////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        G. Twins
                                        time limit per test2 seconds
                                        memory limit per test256 megabytes
                                        inputstandard input
                                        outputstandard output


Imagine that you have a twin brother or sister. Having another person that looks exactly like you seems very unusual. It's hard to say if having something of an alter ego is good or bad. And if you do have a twin, then you very well know what it's like.

Now let's imagine a typical morning in your family. You haven't woken up yet, and Mom is already going to work. She has been so hasty that she has nearly forgotten to leave the two of her darling children some money to buy lunches in the school cafeteria. She fished in the purse and found some number of coins, or to be exact, n coins of arbitrary values a1, a2, ..., an. But as Mom was running out of time, she didn't split the coins for you two. So she scribbled a note asking you to split the money equally.

As you woke up, you found Mom's coins and read her note. "But why split the money equally?" — you thought. After all, your twin is sleeping and he won't know anything. So you decided to act like that: pick for yourself some subset of coins so that the sum of values of your coins is strictly larger than the sum of values of the remaining coins that your twin will have. However, you correctly thought that if you take too many coins, the twin will suspect the deception. So, you've decided to stick to the following strategy to avoid suspicions: you take the minimum number of coins, whose sum of values is strictly more than the sum of values of the remaining coins. On this basis, determine what minimum number of coins you need to take to divide them in the described manner.

Input
The first line contains integer n (1 ≤ n ≤ 100) — the number of coins. The second line contains a sequence of n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the coins' values. All numbers are separated with spaces.

Output
In the single line print the single number — the minimum needed number of coins.

Examples
input
2
3 3
output
2
input
3
2 1 2
output
2
Note
In the first sample you will have to take 2 coins (you and your twin have sums equal to 6, 0 correspondingly). If you take 1 coin, you get sums 3, 3. If you take 0 coins, you get sums 0, 6. Those variants do not satisfy you as your sum should be strictly more that your twins' sum.

In the second sample one coin isn't enough for us, too. You can pick coins with values 1, 2 or 2, 2. In any case, the minimum number of coins equals 2.









